// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.12.0
// source: github.com/cdesiniotis/chord/chordpb/chord.proto

package chordpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Node) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Node) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SuccessorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successors []*Node `protobuf:"bytes,1,rep,name=successors,proto3" json:"successors,omitempty"`
}

func (x *SuccessorList) Reset() {
	*x = SuccessorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessorList) ProtoMessage() {}

func (x *SuccessorList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessorList.ProtoReflect.Descriptor instead.
func (*SuccessorList) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{2}
}

func (x *SuccessorList) GetSuccessors() []*Node {
	if x != nil {
		return x.Successors
	}
	return nil
}

type CoordinatorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldLeaderId []byte `protobuf:"bytes,1,opt,name=oldLeaderId,proto3" json:"oldLeaderId,omitempty"`
	NewLeaderId []byte `protobuf:"bytes,2,opt,name=newLeaderId,proto3" json:"newLeaderId,omitempty"`
}

func (x *CoordinatorMsg) Reset() {
	*x = CoordinatorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorMsg) ProtoMessage() {}

func (x *CoordinatorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorMsg.ProtoReflect.Descriptor instead.
func (*CoordinatorMsg) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{3}
}

func (x *CoordinatorMsg) GetOldLeaderId() []byte {
	if x != nil {
		return x.OldLeaderId
	}
	return nil
}

func (x *CoordinatorMsg) GetNewLeaderId() []byte {
	if x != nil {
		return x.NewLeaderId
	}
	return nil
}

type PeerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeerID) Reset() {
	*x = PeerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerID) ProtoMessage() {}

func (x *PeerID) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerID.ProtoReflect.Descriptor instead.
func (*PeerID) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{4}
}

func (x *PeerID) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{5}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{6}
}

func (x *Value) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KV) Reset() {
	*x = KV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KV) ProtoMessage() {}

func (x *KV) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KV.ProtoReflect.Descriptor instead.
func (*KV) Descriptor() ([]byte, []int) {
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP(), []int{7}
}

func (x *KV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KV) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_github_com_cdesiniotis_chord_chordpb_chord_proto protoreflect.FileDescriptor

var file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x64, 0x65,
	0x73, 0x69, 0x6e, 0x69, 0x6f, 0x74, 0x69, 0x73, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2f, 0x63,
	0x68, 0x6f, 0x72, 0x64, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x3c, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x22, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x17, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1d, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x02, 0x4b, 0x56, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x9f, 0x03, 0x0a, 0x05, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x0b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x25,
	0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x0b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x76, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x0c,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x21,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65,
	0x79, 0x1a, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x09, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64,
	0x2e, 0x4b, 0x56, 0x1a, 0x0c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e,
	0x63, 0x68, 0x6f, 0x72, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x0b, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x69, 0x6f, 0x74,
	0x69, 0x73, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescOnce sync.Once
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescData = file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDesc
)

func file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescGZIP() []byte {
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescOnce.Do(func() {
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescData)
	})
	return file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDescData
}

var file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_cdesiniotis_chord_chordpb_chord_proto_goTypes = []interface{}{
	(*Empty)(nil),          // 0: chord.empty
	(*Node)(nil),           // 1: chord.Node
	(*SuccessorList)(nil),  // 2: chord.SuccessorList
	(*CoordinatorMsg)(nil), // 3: chord.CoordinatorMsg
	(*PeerID)(nil),         // 4: chord.PeerID
	(*Key)(nil),            // 5: chord.Key
	(*Value)(nil),          // 6: chord.Value
	(*KV)(nil),             // 7: chord.KV
}
var file_github_com_cdesiniotis_chord_chordpb_chord_proto_depIdxs = []int32{
	1,  // 0: chord.SuccessorList.successors:type_name -> chord.Node
	4,  // 1: chord.chord.FindSuccessor:input_type -> chord.PeerID
	0,  // 2: chord.chord.GetPredecessor:input_type -> chord.empty
	1,  // 3: chord.chord.Notify:input_type -> chord.Node
	0,  // 4: chord.chord.CheckPredecessor:input_type -> chord.empty
	0,  // 5: chord.chord.GetSuccessorList:input_type -> chord.empty
	3,  // 6: chord.chord.RecvCoordinatorMsg:input_type -> chord.CoordinatorMsg
	5,  // 7: chord.chord.Get:input_type -> chord.Key
	7,  // 8: chord.chord.Put:input_type -> chord.KV
	5,  // 9: chord.chord.Locate:input_type -> chord.Key
	1,  // 10: chord.chord.FindSuccessor:output_type -> chord.Node
	1,  // 11: chord.chord.GetPredecessor:output_type -> chord.Node
	0,  // 12: chord.chord.Notify:output_type -> chord.empty
	0,  // 13: chord.chord.CheckPredecessor:output_type -> chord.empty
	2,  // 14: chord.chord.GetSuccessorList:output_type -> chord.SuccessorList
	0,  // 15: chord.chord.RecvCoordinatorMsg:output_type -> chord.empty
	6,  // 16: chord.chord.Get:output_type -> chord.Value
	0,  // 17: chord.chord.Put:output_type -> chord.empty
	1,  // 18: chord.chord.Locate:output_type -> chord.Node
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_github_com_cdesiniotis_chord_chordpb_chord_proto_init() }
func file_github_com_cdesiniotis_chord_chordpb_chord_proto_init() {
	if File_github_com_cdesiniotis_chord_chordpb_chord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_cdesiniotis_chord_chordpb_chord_proto_goTypes,
		DependencyIndexes: file_github_com_cdesiniotis_chord_chordpb_chord_proto_depIdxs,
		MessageInfos:      file_github_com_cdesiniotis_chord_chordpb_chord_proto_msgTypes,
	}.Build()
	File_github_com_cdesiniotis_chord_chordpb_chord_proto = out.File
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_rawDesc = nil
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_goTypes = nil
	file_github_com_cdesiniotis_chord_chordpb_chord_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	// Find the successor of the given ID
	FindSuccessor(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Node, error)
	// Get the current predecessor of a node
	GetPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Node, error)
	// A Node thinks it is our predecessor and it is notifying us!
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	// Check if predecessor is still alive
	CheckPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Get successor list of a node
	GetSuccessorList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessorList, error)
	// Receive coordinator messages from nodes who are the cooridinators
	// for replica groups around the chord ring
	RecvCoordinatorMsg(ctx context.Context, in *CoordinatorMsg, opts ...grpc.CallOption) (*Empty, error)
	// Get a value
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	// Create a new key-value pair
	Put(ctx context.Context, in *KV, opts ...grpc.CallOption) (*Empty, error)
	// Locate the node containing a key
	Locate(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Node, error)
}

type chordClient struct {
	cc grpc.ClientConnInterface
}

func NewChordClient(cc grpc.ClientConnInterface) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *PeerID, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chord.chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chord.chord/GetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/chord.chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) CheckPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/chord.chord/CheckPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessorList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessorList, error) {
	out := new(SuccessorList)
	err := c.cc.Invoke(ctx, "/chord.chord/GetSuccessorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) RecvCoordinatorMsg(ctx context.Context, in *CoordinatorMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/chord.chord/RecvCoordinatorMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/chord.chord/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Put(ctx context.Context, in *KV, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/chord.chord/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Locate(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chord.chord/Locate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	// Find the successor of the given ID
	FindSuccessor(context.Context, *PeerID) (*Node, error)
	// Get the current predecessor of a node
	GetPredecessor(context.Context, *Empty) (*Node, error)
	// A Node thinks it is our predecessor and it is notifying us!
	Notify(context.Context, *Node) (*Empty, error)
	// Check if predecessor is still alive
	CheckPredecessor(context.Context, *Empty) (*Empty, error)
	// Get successor list of a node
	GetSuccessorList(context.Context, *Empty) (*SuccessorList, error)
	// Receive coordinator messages from nodes who are the cooridinators
	// for replica groups around the chord ring
	RecvCoordinatorMsg(context.Context, *CoordinatorMsg) (*Empty, error)
	// Get a value
	Get(context.Context, *Key) (*Value, error)
	// Create a new key-value pair
	Put(context.Context, *KV) (*Empty, error)
	// Locate the node containing a key
	Locate(context.Context, *Key) (*Node, error)
}

// UnimplementedChordServer can be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (*UnimplementedChordServer) FindSuccessor(context.Context, *PeerID) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (*UnimplementedChordServer) GetPredecessor(context.Context, *Empty) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (*UnimplementedChordServer) Notify(context.Context, *Node) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedChordServer) CheckPredecessor(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPredecessor not implemented")
}
func (*UnimplementedChordServer) GetSuccessorList(context.Context, *Empty) (*SuccessorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorList not implemented")
}
func (*UnimplementedChordServer) RecvCoordinatorMsg(context.Context, *CoordinatorMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvCoordinatorMsg not implemented")
}
func (*UnimplementedChordServer) Get(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedChordServer) Put(context.Context, *KV) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedChordServer) Locate(context.Context, *Key) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Locate not implemented")
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*PeerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_CheckPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).CheckPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/CheckPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).CheckPredecessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/GetSuccessorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessorList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_RecvCoordinatorMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinatorMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).RecvCoordinatorMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/RecvCoordinatorMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).RecvCoordinatorMsg(ctx, req.(*CoordinatorMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Put(ctx, req.(*KV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Locate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Locate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/Locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Locate(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _Chord_GetPredecessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "CheckPredecessor",
			Handler:    _Chord_CheckPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessorList",
			Handler:    _Chord_GetSuccessorList_Handler,
		},
		{
			MethodName: "RecvCoordinatorMsg",
			Handler:    _Chord_RecvCoordinatorMsg_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Chord_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Chord_Put_Handler,
		},
		{
			MethodName: "Locate",
			Handler:    _Chord_Locate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/cdesiniotis/chord/chordpb/chord.proto",
}
