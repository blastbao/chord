syntax = "proto3";

package chord;
option go_package = "github.com/cdesiniotis/chord/chordpb";

service chord {
    // Find the successor of the given ID
    rpc FindSuccessor(PeerID) returns (Node) {};
    // Get the current predecessor of a node
    rpc GetPredecessor(empty) returns (Node) {};
    // A Node thinks it is our predecessor and it is notifying us!
    rpc Notify(Node) returns (empty) {};
    // Check if predecessor is still alive
    rpc CheckPredecessor(empty) returns (empty) {};
    // Get successor list of a node
    rpc GetSuccessorList(empty) returns (SuccessorList) {};
    // TODO: consider changing the names of the below RPCs for replicas. They are not very clear
    // Receive coordinator messages from nodes who are the coordinators
    // for replica groups around the chord ring
    rpc RecvCoordinatorMsg(CoordinatorMsg) returns (empty) {};
    // Get keys we are responsible for from a node (typically a new node calls this on their successor)
    rpc GetKeys(PeerID) returns (KVs) {};
    // Receive replica KV pairs from the leader of the replica group
    rpc SendReplicas(ReplicaMsg) returns (empty) {};
    // Remove replica KV pairs
    rpc RemoveReplicas(ReplicaMsg) returns (empty) {};
    // Get a value
    rpc Get(Key) returns (Value) {};
    // Create a new key-value pair
    rpc Put(KV) returns (empty) {};
    // Locate the node containing a key
    rpc Locate(Key) returns (Node) {};
}

message empty { }

message Node {
    bytes id = 1;
    string addr = 2;
    uint32 port = 3;
}

message SuccessorList {
    repeated Node successors = 1;
}

message CoordinatorMsg {
    bytes oldLeaderId = 1;
    bytes newLeaderId = 2;
}

message ReplicaMsg {
    bytes leaderId = 1;
    repeated KV kv = 2;
}

message PeerID {
    bytes id = 1;
}

message Key {
    string key = 1;
}

message Value {
    bytes value = 1;
}

message KV {
    string key = 1;
    bytes value = 2;
}

message KVs {
    repeated KV kvs = 1;
}
